// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema should match snapshot 1`] = `
"
	type BnfAboutSection implements Node & BnfSimpleRecord @dontInfer {
		order: Int!

		\\"The title of the section. May contain HTML markup.\\"
		title: String!

		\\"The review date of the record, formatted into a string.\\"
		reviewDate: Date @dateformat

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The sections of the record.\\"
		sections: [BnfRecordSection!]!
	}


	type BnfCautionaryAndAdvisoryGuidance implements Node & BnfSimpleRecord @dontInfer {
		\\"The title of the section. May contain HTML markup.\\"
		title: String!

		\\"The review date of the record.\\"
		reviewDate: Date @dateformat

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The sections of the record.\\"
		sections: [BnfRecordSection!]!
	}


	type BnfCautionaryAndAdvisoryLabel implements Node @dontInfer {
		number: Int!

		\\"A description of the label. May contain HTML mark-up. \\"
		description: String!

		\\"The label recommendation in English.\\"
		englishRecommendation: String!

		\\"The Welsh translation of the label recommendation.\\"
		welshRecommendation: String!
	}


	type BnfDentalPractitionersFormulary implements Node & BnfSimpleRecord @dontInfer {
		\\"The title of the section. May contain HTML markup.\\"
		title: String!

		\\"The review date of the record.\\"
		reviewDate: Date @dateformat

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The sections of the record.\\"
		sections: [BnfRecordSection!]!
	}


	\\"\\"\\"
	A drug monograph
	\\"\\"\\"
	type BnfDrug implements Node @dontInfer {
		\\"The PHP ID for the drug e.g. PHP5693\\"
		phpid: ID!

		\\"The SID for the drug e.g. _694410247\\"
		sid: ID!

		\\"The title for the drug. May include HTML markup. E.g. anti-D (Rh0) immunoglobulin has a subscript 0\\"
		title: String!

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The review date, if available for this record.\\"
		reviewDate: Date @dateformat

		\\"The interactant with the same sid as this drug, if it exists, otherwise null\\"
		interactant: BnfInteractant @link(by: \\"sid\\", from: \\"sid\\")

		\\"The constituent drugs. This will be populated if the drug is a combination (e.g. 'tramadol with paracetamol') where each constituent exists in the BNF as a monograph in its own right.\\"
		constituentDrugs: BnfConstituentDrugs

		\\"The indications and dose section for the drug, including any relevant drug classes and preparations.\\"
		indicationsAndDose: BnfIndicationsAndDose

		\\"The medicinal forms for the drug.\\"
		medicinalForms: BnfMedicinalForms!
	}

	\\"\\"\\"
	A wrapper for the constituent drugs of a combination drug.
	\\"\\"\\"
	type BnfConstituentDrugs {
		\\"The standard message to be included with the constituent drugs.\\"
		message: String!

		\\"The constituents of the combination drug. TODO: Make this non-nullable when the feed is fixed (currently it shows constituents that aren't themselves drug monographs)\\"
		constituents: [BnfDrug]! @link(by: \\"sid\\")
	}

	\\"\\"\\"
	The medicinal forms for a drug. A medicinal form is how a drug is made up for a patient to take, such as 'tablet', 'capsule', or 'solution for injection'. Each medicinal form will contain details of the available preparations of the drug. In some cases, a drug monograph may appear in the BNF without any preparations and medicinal forms (for example, if the drug only has special-order preparations that the BNF does not list). In this case, the 'initialStatement' will indicate that there are no medicines listed.
	\\"\\"\\"
	type BnfMedicinalForms {
		\\"The initial statement for the medicinal forms for a drug. This will either be a standard licensing variation statement or a statement to indicate that there are no medicines listed.\\"
		initialStatement: String!

		\\"The BNF does not contain details of special-order preparations, but where these are available, this field contains a statement to say for which forms special-order preparations are available\\"
		specialOrderManufacturersStatement: String

		\\"The medicinal forms. May be empty if there are no licensed medicines listed in the BNF.\\"
		medicinalForms: [BnfMedicinalForm!]!
	}

	\\"\\"\\"
	The properties for a medicinal form. This contains all the preparations and packs for a specific medicinal form for a drug, as well as information about applicable cautionary and advisory labels, excipients and electrolytes.
	\\"\\"\\"
	type BnfMedicinalForm {
		\\"The name of the medicinal form.\\"
		form: String!

		\\"The slugified and lowercased form name, used as a section id, and hash target\\"
		slug: String! @slug(field: \\"form\\")

		\\"A list of any cautionary and advisory labels for the medicinal form.\\"
		cautionaryAndAdvisoryLabels: [String!]

		\\"A list of any excipients for the medicinal form, provided as a text statement.\\"
		excipients: String

		\\"A list of any electrolytes for the medicinal form, provided as a text statement.\\"
		electolytes: String

		\\"The preparations of the drug for the medicinal form.\\"
		preps: [BnfPrep!]!
	}


	type BnfGuidance implements Node & BnfSimpleRecord @dontInfer {
		order: Int!

		\\"The title of the section. May contain HTML markup.\\"
		title: String!

		\\"The review date of the record.\\"
		reviewDate: Date @dateformat

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The sections of the record.\\"
		sections: [BnfRecordSection!]!
	}


	\\"\\"\\"
	A single section of simple (unstructured) content for a BNF drug or medical device. A monograph will include content from relevant drug classes (groups of drugs that share the same properties), the drug itself, and specific preparations where the properties differ from those of the generic drug. This record has these three parts of content in the drugClassContent, drugContent and prepContent fields respectively.
	\\"\\"\\"
	type BnfIndicationsAndDose @dontInfer {
		\\"The name/title of the pot.\\"
		potName: String!

		\\"The slugified and lowercased pot name, used as a DOM ID and hash target\\"
		slug: String! @slug(field: \\"potName\\")

		\\"The indications and dose pot content that relates to relevant drug classes for the drug. This field will contain more than one entry when the drug belongs to multiple drug classes with relevant content for the pot.\\"
		drugClassContent: [BnfIndicationsAndDoseContent]

		\\"The indications and dose pot content that relates to the drug.\\"
		drugContent: BnfIndicationsAndDoseContent

		\\"Any indications and dose pot content that relates to specific preparations. This field will contain more than one entry when the drug has multiple preparations with specific relevant content for the pot.\\"
		prepContent: [BnfIndicationsAndDoseContent]
	}

	\\"\\"\\"
	The details of the indications and doses for a drug, drug class or preparation.
	\\"\\"\\"
	type BnfIndicationsAndDoseContent @dontInfer {
		\\"What the content is for (the name of a drug class, drug or preparation). May contain HTML mark-up\\"
		contentFor: String! @html

		\\"The indication and dose groups.\\"
		indicationAndDoseGroups: [BnfIndicationAndDoseGroup!]!

		\\"Dose adjustments due to interactions content. May contain HTML mark-up.\\"
		doseAdjustments: String @html

		\\"Extremes of body weight content. May contain HTML mark-up.\\"
		extremesOfBodyWeight: String @html

		\\"dose equivalence and conversion content. May contain HTML mark-up.\\"
		doseEquivalence: String @html

		\\"Potency content. May contain HTML mark-up.\\"
		potency: String @html

		\\"Pharmacokinetics content. May contain HTML mark-up.\\"
		pharmacokinetics: String @html
	}

	\\"\\"\\"
	A grouping of one or more indications and the doses relevant for those indications.
	\\"\\"\\"
	type BnfIndicationAndDoseGroup @dontInfer {
		\\"The therapeutic indications.\\"
		therapeuticIndications: [BnfTherapeuticIndication!]!

		\\"The routes, indications, patient groups and doses statements.\\"
		routesAndPatientGroups: [BnfRouteAndPatientGroups!]!
	}

	\\"\\"\\"
	The therapeutic indication, including SNOMED CT coding where available.
	\\"\\"\\"
	type BnfTherapeuticIndication @dontInfer {
		\\"If available, the SNOMED CT identifier that encodes the indication. This value is a should be represented as a 64-bit integer, but it is represented as a String in this JSON to avoid any potential problems of 32-bit integer overflows.\\"
		sctIndication: String

		\\"If available, the English preferred name of the SNOMED CT concept that encodes the therapeutic intent of the indication.\\"
		sctTherapeuticIntent: String

		\\"The indication. May contain HTML mark-up.\\"
		indication: String! @html
	}

	\\"\\"\\"
	The route of administration and one or more patient groups with doses for that route.
	\\"\\"\\"
	type BnfRouteAndPatientGroups @dontInfer {
		\\"The route of administration.\\"
		routeOfAdministration: String!

		\\"The patient groups and dose statements for the given route of administration.\\"
		patientGroups: [BnfPatientGroup!]!
	}

	\\"\\"\\"
	A dose statement and the patient group that the dose applies to (e.g. adult or child).
	\\"\\"\\"
	type BnfPatientGroup @dontInfer {
		\\"The patient group that the dose applies to which can only be adult, child, or neonate.\\"
		patientGroup: String!

		\\"Details of the patient group that the dose applies to (e.g. adult or child).\\"
		detailedPatientGroup: String!

		\\"The dose statement. May contain HTML mark-up.\\"
		doseStatement: String! @html
	}


	\\"\\"\\"
	An interactant, which is a substance against which interaction messages are authored. Interactions are generally authored against moieties while some drug monographs are authored against salts (e.g. 'warfarin' and 'warfarin sodium').
	\\"\\"\\"
	type BnfInteractant implements Node @dontInfer {
		\\"The SID for the Interactant e.g. _694410247 which may, or may not, match the sid of a drug\\"
		sid: String!

		\\"The drug that matches this interactant, that is, the drug with same id if it exists, otherwise null\\"
		drug: BnfDrug @link(by: \\"sid\\", from: \\"sid\\")

		\\"The title for the interactant. May include HTML markup. E.g. anti-D (Rh0) immunoglobulin has a subscript 0\\"
		title: String!

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"An array of interactions related to this particular interactant\\"
		interactions: [BnfInteraction!]!
	}

	\\"\\"\\"
	An interaction, which is a combination of two interactants and an array of interaction messages that give further
	details on this combination.
	\\"\\"\\"
	type BnfInteraction @dontInfer {
		\\"The second interactant\\"
		interactant: BnfInteractant! @link(by: \\"sid\\")

		\\"The messages for this interaction\\"
		messages: [BnfInteractionMessage!]!
	}

	\\"\\"\\"
	An interaction message, which contains am HTML explanation of the nature of the interaction as well as details
	of its severity.
	\\"\\"\\"
	type BnfInteractionMessage @dontInfer {
		\\"An HTML explanation of the nature of the interaction\\"
		message: String!

		\\"A grading of how severe this interaction might be, e.g. severe/moderate\\"
		severity: String!

		\\"An integer that corresponds to the level of severity, with higher numbers indicating greater severity. Useful for sorting. Severe = 4; Moderate = 3; Mild = 2; Normal = 1; Unknown = 0\\"
		severityOrder: Int!

		\\"The evidence for the interaction. This will only be present for messages that are not describing additive effects (i.e. 'additiveEffect' is false). Can only be 'Study', 'Anecdotal', or 'Theoretical'.\\"
		evidence: String

		\\"Whether the interaction is an additive effect (true) or not (false).\\"
		additiveEffect: Boolean!
	}


	\\"\\"\\"
	All the properties for a single medical device monograph.
	\\"\\"\\"
	type BnfMedicalDevice implements Node @dontInfer {
		\\"The PHP ID for the medical device.\\"
		phpid: ID!

		\\"The SID for the medical device.\\"
		sid: ID!

		\\"The title for the medical device. May include HTML mark-up.\\"
		title: String!

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")
	}


	\\"\\"\\"
	The properties for a preparation. Context is provided by this object being given in the 'preps' field of MedicinalForm, or on a Medical Device.
	\\"\\"\\"
	type BnfPrep @dontInfer {
		\\"The name of the preparation, for example, 'Anadin Paracetamol 500mg tablets'.\\"
		name: String!

		\\"The manufacturer/supplier of the preparation, for example, 'GlaxoSmithKline Consumer Healthcare UK Ltd'.\\"
		manufacturer: String!

		\\"The dm+d AMP ID for this preparation. This value is a SNOMED CT identifier, which should be represented as a 64-bit integer, but it is represented as a String in this JSON to avoid any potential problems of 32-bit integer overflows.\\"
		ampId: ID!

		\\"A flag to indicate whether (true) or not (false) this preparation is subject to additional monitoring as required by the European Medicines Agency (EMA). If this flag is true, then an inverted black triangle symbol should be shown (Unicode character U+25BC: ▼).\\"
		blackTriangle: Boolean!

		\\"The controlled drug category for the preparation. If this value is not given then the preparation has no controlled drug status.\\"
		controlledDrugSchedule: String

		\\"A marker to indicate whether the preparation is sugar-free or not. This field will not be populated for borderline substance and wound management preparations.\\"
		sugarFree: Boolean

		\\"A list of the active ingredients for the preparation.\\"
		activeIngredients: [String!]

		\\"A list of the packs for the preparation. For a borderline substance preparation, the packs are sorted by the 'size' field of the pack as a double-precision floating point number, in ascending order.\\"
		packs: [BnfPack!]!
	}

	\\"\\"\\"
	The properties for a specific pack of a preparation.
	\\"\\"\\"
	type BnfPack @dontInfer {
		\\"The dm+d AMPP ID for this pack, if available. This value is a SNOMED CT identifier, which should be represented as a 64-bit integer, but it is represented as a String in this JSON to avoid any potential problems of 32-bit integer overflows.\\"
		amppId: ID

		\\"The quantity/size of the pack. The units for this quantity are given in the 'units' field. Will always be present except for wound management preparations.\\"
		size: String

		\\"The units of the quantity/size in the 'size' field. Will always be present except for wound management preparations.\\"
		unit: String

		\\"The NHS indicative price, if available, for example, £377.00 or £225,513.09. For wound management preparations, this field may contain the drug tariff price if no NHS indicative price exists.\\"
		nhsIndicativePrice: String

		\\"The legal category, if available. Will not be present for +wound management preparations. Can only be 'POM', 'P', 'GSL', or 'Not Applicable'.\\"
		legalCategory: String

		\\"A flag to indicate whether (true) or not (false) this pack is only available through hospital ordering. Will not be present for wound management preparations.\\"
		hospitalOnly: Boolean

		\\"The drug tariff payment category, if available, for example, 'Part VIIIA Category A'.\\"
		drugTariff: String

		\\"The drug tariff price, if available, for example, '£2.94' or '£2,181.53'. For wound management preparations, the drug tariff price may appear in the 'nhsIndicativePrice' field in the case where there is no NHS indicative price available.\\"
		drugTariffPrice: String

		\\"The colour of the preparation, if available. This will only ever be present for wound management preparations.\\"
		colour: String
	}


	\\"\\"\\"
	A section of a simple record.
	\\"\\"\\"
	type BnfRecordSection @dontInfer {
		order: Int!

		\\"The title of the section. May contain HTML markup.\\"
		title: String!

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The review date of the record.\\"
		reviewDate: Date @dateformat

		\\"The content for the section. May contain HTML markup. \\"
		content: String! @html
	}


	\\"\\"\\"
	A simple record that just contains a list of sections.
	For example, treatment summaries, about and guidance records, interactions introduction, etc.
	\\"\\"\\"
	interface BnfSimpleRecord @dontInfer {
		\\"The title of the section. May contain HTML markup.\\"
		title: String!

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The review date of the record.\\"
		reviewDate: Date @dateformat

		\\"The sections of the record.\\"
		sections: [BnfRecordSection!]!
	}


	type BnfTreatmentSummary implements Node & BnfSimpleRecord @dontInfer {
		order: Int!

		\\"The title of the section. May contain HTML markup.\\"
		title: String!

		\\"The review date of the record, formatted into a string.\\"
		reviewDate: Date @dateformat

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The sections of the record.\\"
		sections: [BnfRecordSection!]!
	}


	type BnfWoundManagementIntroduction implements Node & BnfSimpleRecord @dontInfer {
		\\"The title of the section. May contain HTML markup.\\"
		title: String!

		\\"The review date of the record, formatted into a string.\\"
		reviewDate: Date @dateformat

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The sections of the record.\\"
		sections: [BnfRecordSection!]!
	}

	type BnfWoundManagementTaxonomy implements Node @dontInfer {
		\\"The title of the taxonomy node. May contain HTML mark-up.\\"
		title: String!

		\\"The review date of the record.\\"
		reviewDate: Date @dateformat

		\\"The wound management product groups and preparations that are applicable for this point in the wound management taxonomy.\\"
		productGroups: [BnfWoundManagementProductGroup!]!

		\\"Any children records of the wound management taxonomy.\\"
		childTaxonomies: [BnfWoundManagementTaxonomy!]! @link

		\\"The parent taxonomy. Empty for root level taxonomy nodes.\\"
		parentTaxonomy: BnfWoundManagementTaxonomy @link

		\\"The root taxonomy\\"
		rootTaxonomy: BnfWoundManagementTaxonomy! @link
	}

	\\"A wound management product group represents a group of wound management products including details of any relevant preparations and prices.\\"
	type BnfWoundManagementProductGroup @dontInfer {
		\\"The title of the wound management product group.\\"
		title: String!

		# TODO: Add other wound management product fields here when we implement wound management
	}
"
`;
