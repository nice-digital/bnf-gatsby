// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema should match snapshot 1`] = `
"
	type BnfAboutSection implements Node & BnfSimpleRecord @dontInfer {
		order: Int!

		\\"The title of the section. May contain HTML markup.\\"
		title: String!

		\\"The review date of the record, formatted into a string.\\"
		reviewDate: Date @dateformat

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The sections of the record.\\"
		sections: [BnfRecordSection!]!
	}


	type BnfCautionaryAndAdvisoryGuidance implements Node & BnfSimpleRecord @dontInfer {
		\\"The title of the section. May contain HTML markup.\\"
		title: String!

		\\"The review date of the record.\\"
		reviewDate: Date @dateformat

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The sections of the record.\\"
		sections: [BnfRecordSection!]!
	}


	type BnfCautionaryAndAdvisoryLabel implements Node @dontInfer {
		number: Int!

		\\"A description of the label. May contain HTML mark-up. \\"
		description: String!

		\\"The label recommendation in English.\\"
		englishRecommendation: String!

		\\"The Welsh translation of the label recommendation.\\"
		welshRecommendation: String!
	}


	type BnfDentalPractitionersFormulary implements Node & BnfSimpleRecord @dontInfer {
		\\"The title of the section. May contain HTML markup.\\"
		title: String!

		\\"The review date of the record.\\"
		reviewDate: Date @dateformat

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The sections of the record.\\"
		sections: [BnfRecordSection!]!
	}


	\\"\\"\\"
	A drug monograph
	\\"\\"\\"
	type BnfDrug implements Node @dontInfer {
		\\"The PHP ID for the drug e.g. PHP5693\\"
		phpid: ID!

		\\"The SID for the drug e.g. _694410247\\"
		sid: ID!

		\\"The title for the drug. May include HTML markup. E.g. anti-D (Rh0) immunoglobulin has a subscript 0\\"
		title: String!

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The review date, if available for this record.\\"
		reviewDate: Date @dateformat

		\\"The interactant with the same sid as this drug, if it exists, otherwise null\\"
		interactant: BnfInteractant @link(by: \\"sid\\", from: \\"sid\\")

		\\"The constituent drugs. This will be populated if the drug is a combination (e.g. 'tramadol with paracetamol') where each constituent exists in the BNF as a monograph in its own right.\\"
		constituentDrugs: BnfConstituentDrugs
	}

	\\"\\"\\"
	A wrapper for the constituent drugs of a combination drug.
	\\"\\"\\"
	type BnfConstituentDrugs {
		\\"The standard message to be included with the constituent drugs.\\"
		message: String!

		\\"The constituents of the combination drug. TODO: Make this non-nullable when the feed is fixed (currently it shows constituents that aren't themselves drug monographs)\\"
		constituents: [BnfDrug]! @link(by: \\"sid\\")
	}


	type BnfGuidance implements Node & BnfSimpleRecord @dontInfer {
		order: Int!

		\\"The title of the section. May contain HTML markup.\\"
		title: String!

		\\"The review date of the record.\\"
		reviewDate: Date @dateformat

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The sections of the record.\\"
		sections: [BnfRecordSection!]!
	}


	\\"\\"\\"
	An interactant, which is a substance against which interaction messages are authored. Interactions are generally authored against moieties while some drug monographs are authored against salts (e.g. 'warfarin' and 'warfarin sodium'.
	\\"\\"\\"
	type BnfInteractant implements Node @dontInfer {
		\\"The SID for the Interactant e.g. _694410247 which may, or may not, match the sid of a drug\\"
		sid: String!

		\\"The drug that matches this interactant, that is, the drug with same id if it exists, otherwise null\\"
		drug: BnfDrug @link(by: \\"sid\\", from: \\"sid\\")

		\\"The title for the interactant. May include HTML markup. E.g. anti-D (Rh0) immunoglobulin has a subscript 0\\"
		title: String!

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")
	}


	\\"\\"\\"
	All the properties for a single medical device monograph.
	\\"\\"\\"
	type BnfMedicalDevice implements Node @dontInfer {
		\\"The PHP ID for the medical device.\\"
		phpid: ID!

		\\"The SID for the medical device.\\"
		sid: ID!

		\\"The title for the medical device. May include HTML mark-up.\\"
		title: String!

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")
	}


	\\"\\"\\"
	A section of a simple record.
	\\"\\"\\"
	type BnfRecordSection @dontInfer {
		order: Int!

		\\"The title of the section. May contain HTML markup.\\"
		title: String!

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The review date of the record.\\"
		reviewDate: Date @dateformat

		\\"The content for the section. May contain HTML markup. \\"
		content: String! @html
	}


	\\"\\"\\"
	A simple record that just contains a list of sections.
	For example, treatment summaries, about and guidance records, interactions introduction, etc.
	\\"\\"\\"
	interface BnfSimpleRecord @dontInfer {
		\\"The title of the section. May contain HTML markup.\\"
		title: String!

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The review date of the record.\\"
		reviewDate: Date @dateformat

		\\"The sections of the record.\\"
		sections: [BnfRecordSection!]!
	}


	type BnfTreatmentSummary implements Node & BnfSimpleRecord @dontInfer {
		order: Int!

		\\"The title of the section. May contain HTML markup.\\"
		title: String!

		\\"The review date of the record, formatted into a string.\\"
		reviewDate: Date @dateformat

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The sections of the record.\\"
		sections: [BnfRecordSection!]!
	}


	type BnfWoundManagementIntroduction implements Node & BnfSimpleRecord @dontInfer {
		\\"The title of the section. May contain HTML markup.\\"
		title: String!

		\\"The review date of the record, formatted into a string.\\"
		reviewDate: Date @dateformat

		\\"The slugified and lowercased title, used as a URL path\\"
		slug: String! @slug(field: \\"title\\")

		\\"The sections of the record.\\"
		sections: [BnfRecordSection!]!
	}

	type BnfWoundManagementTaxonomy implements Node @dontInfer {
		\\"The title of the taxonomy node. May contain HTML mark-up.\\"
		title: String!

		\\"The review date of the record.\\"
		reviewDate: Date @dateformat

		\\"The wound management product groups and preparations that are applicable for this point in the wound management taxonomy.\\"
		productGroups: [BnfWoundManagementProductGroup!]!

		\\"Any children records of the wound management taxonomy.\\"
		childTaxonomies: [BnfWoundManagementTaxonomy!]! @link

		\\"The parent taxonomy. Empty for root level taxonomy nodes.\\"
		parentTaxonomy: BnfWoundManagementTaxonomy @link

		\\"The root taxonomy\\"
		rootTaxonomy: BnfWoundManagementTaxonomy! @link
	}

	\\"A wound management product group represents a group of wound management products including details of any relevant preparations and prices.\\"
	type BnfWoundManagementProductGroup @dontInfer {
		\\"The title of the wound management product group.\\"
		title: String!

		# TODO: Add other wound management product fields here when we implement wound management
	}
"
`;
